{"ast":null,"code":"import { catchError, from, map, mergeMap, of, repeat } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./flights.service\";\nexport class WorkersService {\n  constructor(httpClient, flightsService) {\n    this.httpClient = httpClient;\n    this.flightsService = flightsService;\n    const nums$ = of(1, 2, 3, 4, 5, 6);\n    const letters$ = of('10', '20', '30');\n    // interval(1000)\n    // .pipe(repeat(2))\n    // .pipe(\n    //   switchMap(() => {\n    //     return nums$\n    //   })\n    // )\n    //   .pipe(map(n => {\n    //     if (n === 3) {\n    //       throw ('E number')\n    //     }\n    //     return n;\n    //   }), catchError((err) => { throw 'err' }))\n    //   .subscribe(\n    //     {\n    //       next: (v) => console.log('v', v),\n    //       error: (e) => {\n    //         console.log('e', e);\n    //         repeat(3)\n    //       }\n    //     }\n    //   );\n    // concat(interval(1000), letters$, \n    from(nums$).pipe(repeat(2)).pipe(map(n => {\n      if (n === 3) {\n        throw 'E number';\n      }\n      return n;\n    }), catchError(err => {\n      throw 'err';\n    })).subscribe({\n      next: v => console.log('v', v),\n      error: e => console.log('e', e)\n    });\n    // .pipe(\n    //   catchError((err) => {\n    //     console.log(err);\n    //     // return throwError(() => new Error(err));\n    //     // return throwError(() => from([]));\n    //     return of();\n    //   })\n    // )\n  }\n\n  getAllWorkers() {\n    return this.httpClient.get(environment.workers);\n  }\n  getWorkerFlights() {\n    // getWorkerFlights(): Observable<any> {\n    const workers$ = this.getAllWorkers();\n    return workers$.pipe(mergeMap(workers => {\n      const {\n        id\n      } = workers[0];\n      return this.flightsService.getFlightByWorkerId(id).pipe(map(flights => ({\n        workers,\n        flights\n      })));\n    }));\n  }\n}\nWorkersService.ɵfac = function WorkersService_Factory(t) {\n  return new (t || WorkersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FlightsService));\n};\nWorkersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkersService,\n  factory: WorkersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAA4BA,UAAU,EAAUC,IAAI,EAAYC,GAAG,EAAEC,QAAQ,EAAEC,EAAE,EAAEC,MAAM,QAAiD,MAAM;AAChJ,SAASC,WAAW,QAAQ,0CAA0C;;;;AAOtE,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,UAAsB,EAAUC,cAA8B;IAA9D,eAAU,GAAVD,UAAU;IAAsB,mBAAc,GAAdC,cAAc;IAEhE,MAAMC,KAAK,GAAGP,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClC,MAAMQ,QAAQ,GAAGR,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAGrC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAH,IAAI,CAACU,KAAK,CAAC,CACRE,IAAI,CAACR,MAAM,CAAC,CAAC,CAAC,CAAC,CACfQ,IAAI,CAACX,GAAG,CAACY,CAAC,IAAG;MACZ,IAAIA,CAAC,KAAK,CAAC,EAAE;QACX,MAAO,UAAU;;MAEnB,OAAOA,CAAC;IACV,CAAC,CAAC,EAAEd,UAAU,CAAEe,GAAG,IAAI;MAAG,MAAM,KAAK;IAAC,CAAC,CAAC,CAAC,CACxCC,SAAS,CACR;MACEC,IAAI,EAAGC,CAAC,IAAKC,OAAO,CAACC,GAAG,CAAC,GAAG,EAAEF,CAAC,CAAC;MAChCG,KAAK,EAAGC,CAAC,IAAKH,OAAO,CAACC,GAAG,CAAC,GAAG,EAAEE,CAAC;KACjC,CACF;IAEH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAGF;;EAEAC,aAAa;IACX,OAAO,IAAI,CAACd,UAAU,CAACe,GAAG,CAAQlB,WAAW,CAACmB,OAAO,CAAC;EACxD;EAEAC,gBAAgB;IACd;IAEA,MAAMC,QAAQ,GAAG,IAAI,CAACJ,aAAa,EAAE;IAErC,OAAOI,QAAQ,CACZd,IAAI,CACHV,QAAQ,CAAEsB,OAAkB,IAAI;MAC9B,MAAM;QAAEG;MAAE,CAAE,GAAGH,OAAO,CAAC,CAAC,CAAC;MACzB,OAAO,IAAI,CAACf,cAAc,CAACmB,mBAAmB,CAACD,EAAE,CAAC,CAC/Cf,IAAI,CAACX,GAAG,CAAE4B,OAAkB,KAAM;QAAEL,OAAO;QAAEK;MAAO,CAAE,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAEH;EAEL;;AA7EWvB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAwB,SAAdxB,cAAc;EAAAyB,YAFb;AAAM","names":["catchError","from","map","mergeMap","of","repeat","environment","WorkersService","constructor","httpClient","flightsService","nums$","letters$","pipe","n","err","subscribe","next","v","console","log","error","e","getAllWorkers","get","workers","getWorkerFlights","workers$","id","getFlightByWorkerId","flights","factory","providedIn"],"sourceRoot":"","sources":["/Users/MaxLevtov/Projects/flights/public/src/app/dashboard/providers/workers.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, catchError, concat, from, interval, map, mergeMap, of, repeat, retry, switchMap, take, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport { FlightsService } from './flights.service';\nimport { IWorker } from '../components/models/worker.model';\nimport { IFlight } from '../components/models/flights.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkersService {\n\n  constructor(private httpClient: HttpClient, private flightsService: FlightsService) {\n\n    const nums$ = of(1, 2, 3, 4, 5, 6)\n    const letters$ = of('10', '20', '30');\n\n\n    // interval(1000)\n    // .pipe(repeat(2))\n    // .pipe(\n    //   switchMap(() => {\n    //     return nums$\n    //   })\n    // )\n    //   .pipe(map(n => {\n    //     if (n === 3) {\n    //       throw ('E number')\n    //     }\n    //     return n;\n    //   }), catchError((err) => { throw 'err' }))\n    //   .subscribe(\n    //     {\n    //       next: (v) => console.log('v', v),\n    //       error: (e) => {\n    //         console.log('e', e);\n    //         repeat(3)\n    //       }\n    //     }\n    //   );\n    // concat(interval(1000), letters$, \n    from(nums$)\n      .pipe(repeat(2))\n      .pipe(map(n => {\n        if (n === 3) {\n          throw ('E number')\n        }\n        return n;\n      }), catchError((err) => { throw 'err' }))\n      .subscribe(\n        {\n          next: (v) => console.log('v', v),\n          error: (e) => console.log('e', e)\n        }\n      );\n\n    // .pipe(\n    //   catchError((err) => {\n    //     console.log(err);\n    //     // return throwError(() => new Error(err));\n    //     // return throwError(() => from([]));\n    //     return of();\n    //   })\n    // )\n\n\n  }\n\n  getAllWorkers(): Observable<IWorker[]> {\n    return this.httpClient.get<any[]>(environment.workers);\n  }\n\n  getWorkerFlights(): Observable<{ workers: IWorker[], flights: IFlight[] }> {\n    // getWorkerFlights(): Observable<any> {\n\n    const workers$ = this.getAllWorkers();\n\n    return workers$\n      .pipe(\n        mergeMap((workers: IWorker[]) => {\n          const { id } = workers[0];\n          return this.flightsService.getFlightByWorkerId(id)\n            .pipe(map((flights: IFlight[]) => ({ workers, flights })))\n        })\n\n      )\n\n  }\n\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}