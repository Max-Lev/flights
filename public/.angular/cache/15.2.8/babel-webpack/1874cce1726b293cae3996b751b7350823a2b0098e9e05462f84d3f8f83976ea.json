{"ast":null,"code":"import { catchError, concat, from, interval, map, mergeMap, of } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./flights.service\";\nexport class WorkersService {\n  constructor(httpClient, flightsService) {\n    this.httpClient = httpClient;\n    this.flightsService = flightsService;\n    const nums$ = from([1, 2, 3, 4, 5, 6]);\n    const letters$ = from(['a', 'b', 'c']);\n    interval(1000).pipe(concat(letters$, nums$).pipe(map(n => {\n      if (n === 3) {\n        throw 'E number';\n      }\n      return n;\n    }), catchError(err => of('err')))).subscribe(\n\n      // {\n      //   next: (v) => console.log(v),\n      //   error: (e) => console.log(e)\n      // }\n    );\n    // .pipe(\n    //   catchError((err) => {\n    //     console.log(err);\n    //     // return throwError(() => new Error(err));\n    //     // return throwError(() => from([]));\n    //     return of();\n    //   })\n    // )\n  }\n\n  getAllWorkers() {\n    return this.httpClient.get(environment.workers);\n  }\n  getWorkerFlights() {\n    // getWorkerFlights(): Observable<any> {\n    const workers$ = this.getAllWorkers();\n    return workers$.pipe(mergeMap(workers => {\n      const {\n        id\n      } = workers[0];\n      return this.flightsService.getFlightByWorkerId(id).pipe(map(flights => ({\n        workers,\n        flights\n      })));\n    }));\n  }\n}\nWorkersService.ɵfac = function WorkersService_Factory(t) {\n  return new (t || WorkersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FlightsService));\n};\nWorkersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkersService,\n  factory: WorkersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,EAAE,QAAoB,MAAM;AACpG,SAASC,WAAW,QAAQ,0CAA0C;;;;AAOtE,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,UAAsB,EAAUC,cAA8B;IAA9D,eAAU,GAAVD,UAAU;IAAsB,mBAAc,GAAdC,cAAc;IAEhE,MAAMC,KAAK,GAAGV,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtC,MAAMW,QAAQ,GAAGX,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACtCC,QAAQ,CAAC,IAAI,CAAC,CAACW,IAAI,CACjBb,MAAM,CAACY,QAAQ,EAAED,KAAK,CAAC,CACpBE,IAAI,CAACV,GAAG,CAACW,CAAC,IAAG;MACZ,IAAIA,CAAC,KAAK,CAAC,EAAE;QACX,MAAO,UAAU;;MAEnB,OAAOA,CAAC;IAEV,CAAC,CAAC,EACAf,UAAU,CAACgB,GAAG,IAAIV,EAAE,CAAC,KAAK,CAAC,CAAC,CAC7B,CAAC,CACHW,SAAS;;MACR;MACA;MACA;MACA;IAAA,CACD;IAEH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAGF;;EAEAC,aAAa;IACX,OAAO,IAAI,CAACR,UAAU,CAACS,GAAG,CAAQZ,WAAW,CAACa,OAAO,CAAC;EACxD;EAEAC,gBAAgB;IACd;IAEA,MAAMC,QAAQ,GAAG,IAAI,CAACJ,aAAa,EAAE;IAErC,OAAOI,QAAQ,CACZR,IAAI,CACHT,QAAQ,CAAEe,OAAkB,IAAI;MAC9B,MAAM;QAAEG;MAAE,CAAE,GAAGH,OAAO,CAAC,CAAC,CAAC;MACzB,OAAO,IAAI,CAACT,cAAc,CAACa,mBAAmB,CAACD,EAAE,CAAC,CAC/CT,IAAI,CAACV,GAAG,CAAEqB,OAAkB,KAAM;QAAEL,OAAO;QAAEK;MAAO,CAAE,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAEH;EAEL;;AAvDWjB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAkB,SAAdlB,cAAc;EAAAmB,YAFb;AAAM","names":["catchError","concat","from","interval","map","mergeMap","of","environment","WorkersService","constructor","httpClient","flightsService","nums$","letters$","pipe","n","err","subscribe","getAllWorkers","get","workers","getWorkerFlights","workers$","id","getFlightByWorkerId","flights","factory","providedIn"],"sourceRoot":"","sources":["/Users/MaxLevtov/Projects/flights/public/src/app/dashboard/providers/workers.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, concat, from, interval, map, mergeMap, of, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport { FlightsService } from './flights.service';\nimport { IWorker } from '../components/models/worker.model';\nimport { IFlight } from '../components/models/flights.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkersService {\n\n  constructor(private httpClient: HttpClient, private flightsService: FlightsService) {\n\n    const nums$ = from([1, 2, 3, 4, 5, 6])\n    const letters$ = from(['a', 'b', 'c']);\n    interval(1000).pipe(\n      concat(letters$, nums$)\n        .pipe(map(n => {\n          if (n === 3) {\n            throw ('E number')\n          }\n          return n;\n\n        }),\n          catchError(err => of('err'))\n        ))\n      .subscribe(\n        // {\n        //   next: (v) => console.log(v),\n        //   error: (e) => console.log(e)\n        // }\n      )\n\n    // .pipe(\n    //   catchError((err) => {\n    //     console.log(err);\n    //     // return throwError(() => new Error(err));\n    //     // return throwError(() => from([]));\n    //     return of();\n    //   })\n    // )\n\n\n  }\n\n  getAllWorkers(): Observable<IWorker[]> {\n    return this.httpClient.get<any[]>(environment.workers);\n  }\n\n  getWorkerFlights(): Observable<{ workers: IWorker[], flights: IFlight[] }> {\n    // getWorkerFlights(): Observable<any> {\n\n    const workers$ = this.getAllWorkers();\n\n    return workers$\n      .pipe(\n        mergeMap((workers: IWorker[]) => {\n          const { id } = workers[0];\n          return this.flightsService.getFlightByWorkerId(id)\n            .pipe(map((flights: IFlight[]) => ({ workers, flights })))\n        })\n\n      )\n\n  }\n\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}