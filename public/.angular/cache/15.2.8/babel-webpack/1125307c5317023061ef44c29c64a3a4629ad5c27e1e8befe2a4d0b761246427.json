{"ast":null,"code":"import { catchError, map, mergeMap, of } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./flights.service\";\nexport class WorkersService {\n  constructor(httpClient, flightsService) {\n    this.httpClient = httpClient;\n    this.flightsService = flightsService;\n  }\n  getAllWorkers() {\n    return this.httpClient.get(environment.workers);\n  }\n  getWorkerFlights() {\n    const workers$ = this.getAllWorkers();\n    return workers$.pipe(catchError(err => {\n      console.log(err);\n      // return throwError(() => new Error(err));\n      // return throwError(() => from([]));\n      return of();\n    })).pipe(mergeMap(workers => {\n      const {\n        id\n      } = workers[0];\n      return this.flightsService.getFlightByWorkerId(id).pipe(map(flights => ({\n        workers,\n        flights\n      })));\n    }));\n  }\n}\nWorkersService.ɵfac = function WorkersService_Factory(t) {\n  return new (t || WorkersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FlightsService));\n};\nWorkersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkersService,\n  factory: WorkersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAQC,GAAG,EAAEC,QAAQ,EAAEC,EAAE,QAAoB,MAAM;AAClF,SAASC,WAAW,QAAQ,0CAA0C;;;;AAOtE,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,UAAsB,EAAUC,cAA8B;IAA9D,eAAU,GAAVD,UAAU;IAAsB,mBAAc,GAAdC,cAAc;EAAoB;EAEtFC,aAAa;IACX,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAQN,WAAW,CAACO,OAAO,CAAC;EACxD;EAEAC,gBAAgB;IAEd,MAAMC,QAAQ,GAAG,IAAI,CAACJ,aAAa,EAAE;IAErC,OAAOI,QAAQ,CACZC,IAAI,CACHd,UAAU,CAAEe,GAAG,IAAI;MACjBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChB;MACA;MACA,OAAOZ,EAAE,EAAE;IACb,CAAC,CAAC,CACH,CACAW,IAAI,CACHZ,QAAQ,CAAES,OAAkB,IAAI;MAC9B,MAAM;QAAEO;MAAE,CAAE,GAAGP,OAAO,CAAC,CAAC,CAAC;MACzB,OAAO,IAAI,CAACH,cAAc,CAACW,mBAAmB,CAACD,EAAE,CAAC,CAC/CJ,IAAI,CAACb,GAAG,CAAEmB,OAAkB,KAAM;QAAET,OAAO;QAAES;MAAO,CAAE,CAAC,CAAC,CAAC;IAE9D,CAAC,CAAC,CACH;EACL;;AA7BWf,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAgB,SAAdhB,cAAc;EAAAiB,YAFb;AAAM","names":["catchError","map","mergeMap","of","environment","WorkersService","constructor","httpClient","flightsService","getAllWorkers","get","workers","getWorkerFlights","workers$","pipe","err","console","log","id","getFlightByWorkerId","flights","factory","providedIn"],"sourceRoot":"","sources":["/Users/MaxLevtov/Projects/flights/public/src/app/dashboard/providers/workers.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, from, map, mergeMap, of, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport { FlightsService } from './flights.service';\nimport { IWorker } from '../components/models/worker.model';\nimport { IFlight } from '../components/models/flights.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkersService {\n\n  constructor(private httpClient: HttpClient, private flightsService: FlightsService) { }\n\n  getAllWorkers(): Observable<IWorker[]> {\n    return this.httpClient.get<any[]>(environment.workers);\n  }\n\n  getWorkerFlights(): Observable<{ workers: IWorker[], flights: IFlight[] }> {\n\n    const workers$ = this.getAllWorkers();\n\n    return workers$\n      .pipe(\n        catchError((err) => {\n          console.log(err);\n          // return throwError(() => new Error(err));\n          // return throwError(() => from([]));\n          return of();\n        })\n      )\n      .pipe(\n        mergeMap((workers: IWorker[]) => {\n          const { id } = workers[0];\n          return this.flightsService.getFlightByWorkerId(id)\n            .pipe(map((flights: IFlight[]) => ({ workers, flights })))\n\n        })\n      );\n  }\n\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}