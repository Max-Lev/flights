{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject, map, takeUntil } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/listbox\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"listbox\"];\nexport class WorkersComponent {\n  constructor() {\n    this.selectedWorkerEventEmitter = new EventEmitter();\n    this.sub$ = new Subject();\n  }\n  ngAfterViewInit() {\n    this.setDefaultWorker();\n  }\n  ngOnDestroy() {\n    this.sub$.next(true);\n    this.sub$.unsubscribe();\n  }\n  onClick(selectedWorker) {\n    this.selectedWorkerEventEmitter.emit(selectedWorker);\n  }\n  setDefaultWorker() {\n    this.workers$.pipe(map(worker => worker[0])).pipe(takeUntil(this.sub$)).subscribe(worker => {\n      this.listbox.value = worker;\n      this.selectedWorker = worker;\n    });\n  }\n}\nWorkersComponent.ɵfac = function WorkersComponent_Factory(t) {\n  return new (t || WorkersComponent)();\n};\nWorkersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WorkersComponent,\n  selectors: [[\"app-workers-list\"]],\n  viewQuery: function WorkersComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listbox = _t.first);\n    }\n  },\n  inputs: {\n    workers$: \"workers$\"\n  },\n  outputs: {\n    selectedWorkerEventEmitter: \"selectedWorkerEventEmitter\"\n  },\n  decls: 7,\n  vars: 4,\n  consts: [[1, \"container\"], [1, \"title\"], [\"optionLabel\", \"name\", 3, \"options\", \"ngModel\", \"onClick\", \"ngModelChange\"], [\"listbox\", \"\"]],\n  template: function WorkersComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"h1\");\n      i0.ɵɵtext(3, \"Workers\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"p-listbox\", 2, 3);\n      i0.ɵɵlistener(\"onClick\", function WorkersComponent_Template_p_listbox_onClick_4_listener() {\n        return ctx.onClick(ctx.selectedWorker);\n      })(\"ngModelChange\", function WorkersComponent_Template_p_listbox_ngModelChange_4_listener($event) {\n        return ctx.selectedWorker = $event;\n      });\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"options\", i0.ɵɵpipeBind1(6, 2, ctx.workers$))(\"ngModel\", ctx.selectedWorker);\n    }\n  },\n  dependencies: [i1.Listbox, i2.NgControlStatus, i2.NgModel, i3.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]   .container[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  flex-direction: column;\\n}\\n[_nghost-%COMP%]   .container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%] {\\n  text-align: center;\\n  line-height: 0.8rem;\\n}\\n[_nghost-%COMP%]   .container[_ngcontent-%COMP%]     p-listbox {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZGFzaGJvYXJkL2NvbXBvbmVudHMvd29ya2Vycy93b3JrZXJzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0ksYUFBQTtFQUNBLHVCQUFBO0VBQ0Esc0JBQUE7QUFBUjtBQUNRO0VBQ0ksa0JBQUE7RUFDQSxtQkFBQTtBQUNaO0FBRVk7RUFDSSxXQUFBO0FBQWhCIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3R7XG4gICAgLmNvbnRhaW5lcntcbiAgICAgICAgZGlzcGxheTpmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAudGl0bGV7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogLjhyZW07XG4gICAgICAgIH1cbiAgICAgICAgOjpuZy1kZWVwe1xuICAgICAgICAgICAgcC1saXN0Ym94e1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"AAAA,SACqDA,YAAY,QAC1D,eAAe;AAEtB,SAAqBC,OAAO,EAAEC,GAAG,EAAEC,SAAS,QAAQ,MAAM;;;;;;AAS1D,OAAM,MAAOC,gBAAgB;EAN7BC;IAcY,+BAA0B,GAA0B,IAAIL,YAAY,EAAE;IAEhF,SAAI,GAAqB,IAAIC,OAAO,EAAW;;EAE/CK,eAAe;IACb,IAAI,CAACC,gBAAgB,EAAE;EACzB;EAEAC,WAAW;IACT,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC;IACpB,IAAI,CAACD,IAAI,CAACE,WAAW,EAAE;EACzB;EAEAC,OAAO,CAACC,cAAmB;IACzB,IAAI,CAACC,0BAA0B,CAACC,IAAI,CAACF,cAAc,CAAC;EACtD;EAEAN,gBAAgB;IACd,IAAI,CAACS,QAAQ,CAACC,IAAI,CAACf,GAAG,CAAEgB,MAAiB,IAAKA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CACtDD,IAAI,CAACd,SAAS,CAAC,IAAI,CAACM,IAAI,CAAC,CAAC,CAACU,SAAS,CAACD,MAAM,IAAG;MAC7C,IAAI,CAACE,OAAO,CAACC,KAAK,GAAGH,MAAM;MAC3B,IAAI,CAACL,cAAc,GAAGK,MAAM;IAC9B,CAAC,CAAC;EACN;;AA/BWd,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;QAAhBA,gBAAgB;EAAAkB;EAAAC;IAAA;;;;;;;;;;;;;;;;;;;MCb7BC,kCAA2B;MAEfA,uBAAO;MAAAA,iBAAK;MAEpBA,uCAEuB;MAF6BA;QAAA,OAAWC,+BAAuB;MAAA,EAAC;QAAA;MAAA;;MAEhED,iBAAY;;;MAFfA,eAA+B;MAA/BA,4DAA+B","names":["EventEmitter","Subject","map","takeUntil","WorkersComponent","constructor","ngAfterViewInit","setDefaultWorker","ngOnDestroy","sub$","next","unsubscribe","onClick","selectedWorker","selectedWorkerEventEmitter","emit","workers$","pipe","worker","subscribe","listbox","value","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["/Users/MaxLevtov/Projects/flights/public/src/app/dashboard/components/workers/workers.component.ts","/Users/MaxLevtov/Projects/flights/public/src/app/dashboard/components/workers/workers.component.html"],"sourcesContent":["import {\n  AfterViewInit, ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, ViewChild\n} from '@angular/core';\nimport { Listbox } from 'primeng/listbox';\nimport { Observable, Subject, map, takeUntil } from 'rxjs';\nimport { IWorker } from '../models/worker.model';\n\n@Component({\n  selector: 'app-workers-list',\n  templateUrl: './workers.component.html',\n  styleUrls: ['./workers.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WorkersComponent implements AfterViewInit, OnDestroy {\n\n  @Input() workers$: Observable<IWorker[]>;\n\n  selectedWorker: IWorker;\n\n  @ViewChild('listbox') listbox: Listbox;\n\n  @Output() selectedWorkerEventEmitter: EventEmitter<IWorker> = new EventEmitter();\n\n  sub$: Subject<boolean> = new Subject<boolean>();\n\n  ngAfterViewInit(): void {\n    this.setDefaultWorker();\n  }\n\n  ngOnDestroy(): void {\n    this.sub$.next(true);\n    this.sub$.unsubscribe();\n  }\n\n  onClick(selectedWorker: any) {\n    this.selectedWorkerEventEmitter.emit(selectedWorker);\n  }\n\n  setDefaultWorker(): void {\n    this.workers$.pipe(map((worker: IWorker[]) => worker[0]))\n      .pipe(takeUntil(this.sub$)).subscribe(worker => {\n        this.listbox.value = worker;\n        this.selectedWorker = worker;\n      });\n  }\n\n}\n","<section class=\"container\">\n    <div class=\"title\">\n        <h1>Workers</h1>\n    </div>\n    <p-listbox #listbox [options]=\"(workers$ | async)!\" (onClick)=\"onClick(selectedWorker)\" \n    [(ngModel)]=\"selectedWorker\"\n        optionLabel=\"name\"></p-listbox>\n</section>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}