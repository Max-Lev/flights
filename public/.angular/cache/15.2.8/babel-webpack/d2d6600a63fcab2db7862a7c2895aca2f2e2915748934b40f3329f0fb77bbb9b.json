{"ast":null,"code":"import { catchError, map, mergeMap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./flights.service\";\nexport class WorkersService {\n  constructor(httpClient, flightsService) {\n    this.httpClient = httpClient;\n    this.flightsService = flightsService;\n  }\n  getAllWorkers() {\n    return this.httpClient.get(environment.workers);\n  }\n  getWorkerFlights() {\n    const workers$ = this.getAllWorkers();\n    return workers$.pipe(mergeMap(workers => {\n      const {\n        id\n      } = workers[0];\n      return this.flightsService.getFlightByWorkerId(id).pipe(catchError(err => {\n        console.log(err);\n        return throwError(() => new Error(err.error));\n      })).pipe(map(flights => ({\n        workers,\n        flights\n      })));\n    }));\n  }\n}\nWorkersService.ɵfac = function WorkersService_Factory(t) {\n  return new (t || WorkersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FlightsService));\n};\nWorkersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkersService,\n  factory: WorkersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,MAAM;AACxE,SAASC,WAAW,QAAQ,0CAA0C;;;;AAOtE,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,UAAsB,EAAUC,cAA8B;IAA9D,eAAU,GAAVD,UAAU;IAAsB,mBAAc,GAAdC,cAAc;EAAoB;EAEtFC,aAAa;IACX,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAQN,WAAW,CAACO,OAAO,CAAC;EACxD;EAEAC,gBAAgB;IAEd,MAAMC,QAAQ,GAAG,IAAI,CAACJ,aAAa,EAAE;IAErC,OAAOI,QAAQ,CAACC,IAAI,CAClBZ,QAAQ,CAAES,OAAkB,IAAI;MAC9B,MAAM;QAAEI;MAAE,CAAE,GAAGJ,OAAO,CAAC,CAAC,CAAC;MACzB,OAAO,IAAI,CAACH,cAAc,CAACQ,mBAAmB,CAACD,EAAE,CAAC,CAC/CD,IAAI,CACHd,UAAU,CAAEiB,GAAG,IAAI;QACjBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChB,OAAOd,UAAU,CAAC,MAAM,IAAIiB,KAAK,CAACH,GAAG,CAACI,KAAK,CAAC,CAAC;MAC/C,CAAC,CAAC,CACH,CACAP,IAAI,CAACb,GAAG,CAAEqB,OAAkB,KAAM;QAAEX,OAAO;QAAEW;MAAO,CAAE,CAAC,CAAC,CAAC;IAE9D,CAAC,CAAC,CACH;EACH;;AA1BWjB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAkB,SAAdlB,cAAc;EAAAmB,YAFb;AAAM","names":["catchError","map","mergeMap","throwError","environment","WorkersService","constructor","httpClient","flightsService","getAllWorkers","get","workers","getWorkerFlights","workers$","pipe","id","getFlightByWorkerId","err","console","log","Error","error","flights","factory","providedIn"],"sourceRoot":"","sources":["/Users/MaxLevtov/Projects/flights/public/src/app/dashboard/providers/workers.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, map, mergeMap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport { FlightsService } from './flights.service';\nimport { IWorker } from '../components/models/worker.model';\nimport { IFlight } from '../components/models/flights.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkersService {\n\n  constructor(private httpClient: HttpClient, private flightsService: FlightsService) { }\n\n  getAllWorkers(): Observable<IWorker[]> {\n    return this.httpClient.get<any[]>(environment.workers);\n  }\n\n  getWorkerFlights(): Observable<{ workers: IWorker[], flights: IFlight[] }> {\n\n    const workers$ = this.getAllWorkers();\n\n    return workers$.pipe(\n      mergeMap((workers: IWorker[]) => {\n        const { id } = workers[0];\n        return this.flightsService.getFlightByWorkerId(id)\n          .pipe(\n            catchError((err) => {\n              console.log(err);\n              return throwError(() => new Error(err.error));\n            })\n          )\n          .pipe(map((flights: IFlight[]) => ({ workers, flights })))\n\n      })\n    );\n  }\n\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}