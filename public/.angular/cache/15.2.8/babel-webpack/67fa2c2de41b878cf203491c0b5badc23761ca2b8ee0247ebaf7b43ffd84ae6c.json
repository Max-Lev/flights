{"ast":null,"code":"import { map, mergeMap, of } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./flights.service\";\nexport class WorkersService {\n  constructor(httpClient, flightsService) {\n    this.httpClient = httpClient;\n    this.flightsService = flightsService;\n    const nums$ = of(1, 2, 3, 4, 5, 6);\n    const letters$ = of('10', '20', '30');\n    // interval(1000)\n    // .pipe(repeat(2))\n    // .pipe(\n    //   switchMap(() => {\n    //     return nums$\n    //   })\n    // )\n    //   .pipe(map(n => {\n    //     if (n === 3) {\n    //       throw ('E number')\n    //     }\n    //     return n;\n    //   }), catchError((err) => { throw 'err' }))\n    //   .subscribe(\n    //     {\n    //       next: (v) => console.log('v', v),\n    //       error: (e) => {\n    //         console.log('e', e);\n    //         repeat(3)\n    //       }\n    //     }\n    //   );\n    // concat(interval(1000), letters$, \n    // from(nums$)\n    //   // .pipe(repeat(2))\n    //   .pipe(\n    //     map(n => {\n    //       if (n === 3) {\n    //         throw ('E number')\n    //       }\n    //       return n;\n    //     }),\n    //     repeat(2),\n    //     catchError((err) => { throw 'err' })\n    //   )\n    //   .subscribe(\n    //     {\n    //       next: (v) => console.log('v', v),\n    //       error: (e) => console.log('e', e),\n    //       complete:()=>console.log('complete')\n    //     }\n    //   );\n    // .pipe(\n    //   catchError((err) => {\n    //     console.log(err);\n    //     // return throwError(() => new Error(err));\n    //     // return throwError(() => from([]));\n    //     return of();\n    //   })\n    // )\n  }\n\n  getAllWorkers() {\n    return this.httpClient.get(environment.workers);\n  }\n  getWorkerFlights() {\n    // getWorkerFlights(): Observable<any> {\n    const workers$ = this.getAllWorkers();\n    return workers$.pipe(mergeMap(workers => {\n      const {\n        id\n      } = workers[0];\n      return this.flightsService.getFlightByWorkerId(id).pipe(map(flights => ({\n        workers,\n        flights\n      })));\n    }));\n  }\n}\nWorkersService.ɵfac = function WorkersService_Factory(t) {\n  return new (t || WorkersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FlightsService));\n};\nWorkersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkersService,\n  factory: WorkersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAgEA,GAAG,EAAEC,QAAQ,EAAEC,EAAE,QAAyD,MAAM;AAChJ,SAASC,WAAW,QAAQ,0CAA0C;;;;AAOtE,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,UAAsB,EAAUC,cAA8B;IAA9D,eAAU,GAAVD,UAAU;IAAsB,mBAAc,GAAdC,cAAc;IAEhE,MAAMC,KAAK,GAAGN,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClC,MAAMO,QAAQ,GAAGP,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAGrC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAGF;;EAEAQ,aAAa;IACX,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAQR,WAAW,CAACS,OAAO,CAAC;EACxD;EAEAC,gBAAgB;IACd;IAEA,MAAMC,QAAQ,GAAG,IAAI,CAACJ,aAAa,EAAE;IAErC,OAAOI,QAAQ,CACZC,IAAI,CACHd,QAAQ,CAAEW,OAAkB,IAAI;MAC9B,MAAM;QAAEI;MAAE,CAAE,GAAGJ,OAAO,CAAC,CAAC,CAAC;MACzB,OAAO,IAAI,CAACL,cAAc,CAACU,mBAAmB,CAACD,EAAE,CAAC,CAC/CD,IAAI,CAACf,GAAG,CAAEkB,OAAkB,KAAM;QAAEN,OAAO;QAAEM;MAAO,CAAE,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAEH;EAEL;;AAnFWd,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAe,SAAdf,cAAc;EAAAgB,YAFb;AAAM","names":["map","mergeMap","of","environment","WorkersService","constructor","httpClient","flightsService","nums$","letters$","getAllWorkers","get","workers","getWorkerFlights","workers$","pipe","id","getFlightByWorkerId","flights","factory","providedIn"],"sourceRoot":"","sources":["/Users/MaxLevtov/Projects/flights/public/src/app/dashboard/providers/workers.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, catchError, concat, from, interval, map, mergeMap, of, repeat, retry, switchMap, take, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport { FlightsService } from './flights.service';\nimport { IWorker } from '../components/models/worker.model';\nimport { IFlight } from '../components/models/flights.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkersService {\n\n  constructor(private httpClient: HttpClient, private flightsService: FlightsService) {\n\n    const nums$ = of(1, 2, 3, 4, 5, 6)\n    const letters$ = of('10', '20', '30');\n\n\n    // interval(1000)\n    // .pipe(repeat(2))\n    // .pipe(\n    //   switchMap(() => {\n    //     return nums$\n    //   })\n    // )\n    //   .pipe(map(n => {\n    //     if (n === 3) {\n    //       throw ('E number')\n    //     }\n    //     return n;\n    //   }), catchError((err) => { throw 'err' }))\n    //   .subscribe(\n    //     {\n    //       next: (v) => console.log('v', v),\n    //       error: (e) => {\n    //         console.log('e', e);\n    //         repeat(3)\n    //       }\n    //     }\n    //   );\n    // concat(interval(1000), letters$, \n    \n    // from(nums$)\n    //   // .pipe(repeat(2))\n    //   .pipe(\n    //     map(n => {\n    //       if (n === 3) {\n    //         throw ('E number')\n    //       }\n    //       return n;\n    //     }),\n    //     repeat(2),\n    //     catchError((err) => { throw 'err' })\n    //   )\n    //   .subscribe(\n    //     {\n    //       next: (v) => console.log('v', v),\n    //       error: (e) => console.log('e', e),\n    //       complete:()=>console.log('complete')\n    //     }\n    //   );\n\n    // .pipe(\n    //   catchError((err) => {\n    //     console.log(err);\n    //     // return throwError(() => new Error(err));\n    //     // return throwError(() => from([]));\n    //     return of();\n    //   })\n    // )\n\n\n  }\n\n  getAllWorkers(): Observable<IWorker[]> {\n    return this.httpClient.get<any[]>(environment.workers);\n  }\n\n  getWorkerFlights(): Observable<{ workers: IWorker[], flights: IFlight[] }> {\n    // getWorkerFlights(): Observable<any> {\n\n    const workers$ = this.getAllWorkers();\n\n    return workers$\n      .pipe(\n        mergeMap((workers: IWorker[]) => {\n          const { id } = workers[0];\n          return this.flightsService.getFlightByWorkerId(id)\n            .pipe(map((flights: IFlight[]) => ({ workers, flights })))\n        })\n\n      )\n\n  }\n\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}