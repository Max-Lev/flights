{"ast":null,"code":"import { Subject, interval, mergeMap, of, repeat, take, takeUntil } from 'rxjs';\nimport { WorkersComponent } from './components/workers/workers.component';\nimport { FLIGHT_COLUMNS, DETAILS_COLUMNS } from './components/models/flights.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./providers/flights.service\";\nimport * as i3 from \"./components/workers/workers.component\";\nimport * as i4 from \"./components/flights/flights.component\";\nimport * as i5 from \"./components/details/details.component\";\nexport class DashboardContainerComponent {\n  constructor(activatedRoute, changeDetectorRef, flightsService) {\n    this.activatedRoute = activatedRoute;\n    this.changeDetectorRef = changeDetectorRef;\n    this.flightsService = flightsService;\n    this.flightColumns = FLIGHT_COLUMNS;\n    this.detailsColumns = DETAILS_COLUMNS;\n    this._stop = new Subject();\n    this._start = new Subject();\n    this.sub$ = new Subject();\n  }\n  ngOnInit() {\n    this.workers$ = of(this.activatedRoute.snapshot.data['dashboardResolver'].workers);\n    this.flights$ = of(this.activatedRoute.snapshot.data['dashboardResolver'].flights);\n  }\n  ngAfterViewInit() {\n    this._start.next();\n    this.pullFlights$();\n  }\n  ngOnDestroy() {\n    this.sub$.next(true);\n    this.sub$.unsubscribe();\n  }\n  selectedFlightEmitterHandler(flight) {\n    this.flightDetails = {\n      ...flight\n    };\n  }\n  selectedWorkerEventHandler(worker) {\n    console.log('selectedWorkerEventHandler ', new Date().getMinutes() + ':', new Date().getSeconds());\n    this._stop.next();\n    this.flightsService.getFlightByWorkerId(worker.id).pipe(take(1)).pipe(takeUntil(this.sub$)).subscribe(flights => {\n      this.flights$ = of(flights);\n      this._start.next();\n      this.pullFlights$();\n      /**\n       * @description improve UX: display flights before next CD cycle\n       */\n      this.changeDetectorRef.detectChanges();\n    });\n  }\n  pullFlights$() {\n    // const duration = (1 * 60 * 1000);\n    const duration = 1000;\n    interval(duration).pipe(mergeMap(() => of(this.selectedWorkerEventHandler(this.workersCmp.selectedWorker))), takeUntil(this._stop), repeat({\n      delay: () => this._start\n    })).pipe(takeUntil(this.sub$))\n    // .pipe(tap(() => console.log('pullFlights ', new Date().getMinutes() + ':', new Date().getSeconds())))\n    .subscribe(r => console.log('r: ', r));\n  }\n}\nDashboardContainerComponent.ɵfac = function DashboardContainerComponent_Factory(t) {\n  return new (t || DashboardContainerComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.FlightsService));\n};\nDashboardContainerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DashboardContainerComponent,\n  selectors: [[\"app-flights\"]],\n  viewQuery: function DashboardContainerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(WorkersComponent, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.workersCmp = _t.first);\n    }\n  },\n  decls: 4,\n  vars: 5,\n  consts: [[1, \"container\"], [3, \"workers$\", \"selectedWorkerEventEmitter\"], [3, \"flights$\", \"columns\", \"selectedFlightEmitter\"], [3, \"flightDetails\", \"columns\"]],\n  template: function DashboardContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"app-workers-list\", 1);\n      i0.ɵɵlistener(\"selectedWorkerEventEmitter\", function DashboardContainerComponent_Template_app_workers_list_selectedWorkerEventEmitter_1_listener($event) {\n        return ctx.selectedWorkerEventHandler($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"app-flights-list\", 2);\n      i0.ɵɵlistener(\"selectedFlightEmitter\", function DashboardContainerComponent_Template_app_flights_list_selectedFlightEmitter_2_listener($event) {\n        return ctx.selectedFlightEmitterHandler($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"app-details\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"workers$\", ctx.workers$);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"flights$\", ctx.flights$)(\"columns\", ctx.flightColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"flightDetails\", ctx.flightDetails)(\"columns\", ctx.detailsColumns);\n    }\n  },\n  dependencies: [i3.WorkersComponent, i4.FlightsComponent, i5.DetailsComponent],\n  styles: [\"[_nghost-%COMP%]   .container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n}\\n[_nghost-%COMP%]   .container[_ngcontent-%COMP%]     app-workers-list {\\n  flex-basis: 15%;\\n  border: 1px solid rgba(255, 255, 255, 0.3);\\n}\\n[_nghost-%COMP%]   .container[_ngcontent-%COMP%]     app-flights-list {\\n  flex-basis: 70%;\\n  border: 1px solid rgba(255, 255, 255, 0.3);\\n}\\n[_nghost-%COMP%]   .container[_ngcontent-%COMP%]     app-details {\\n  flex-basis: 15%;\\n  border: 1px solid rgba(255, 255, 255, 0.3);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZGFzaGJvYXJkL2Rhc2hib2FyZC1jb250YWluZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0k7RUFDSSxhQUFBO0VBQ0EsbUJBQUE7QUFBUjtBQUdZO0VBQ0ksZUFBQTtFQUNBLDBDQUFBO0FBRGhCO0FBSVk7RUFDSSxlQUFBO0VBQ0EsMENBQUE7QUFGaEI7QUFJWTtFQUNJLGVBQUE7RUFDQSwwQ0FBQTtBQUZoQiIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcbiAgICAuY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcblxuICAgICAgICA6Om5nLWRlZXAge1xuICAgICAgICAgICAgYXBwLXdvcmtlcnMtbGlzdCB7XG4gICAgICAgICAgICAgICAgZmxleC1iYXNpczogMTUlO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXBwLWZsaWdodHMtbGlzdCB7XG4gICAgICAgICAgICAgICAgZmxleC1iYXNpczogNzAlO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFwcC1kZXRhaWxze1xuICAgICAgICAgICAgICAgIGZsZXgtYmFzaXM6IDE1JTtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["Subject","interval","mergeMap","of","repeat","take","takeUntil","WorkersComponent","FLIGHT_COLUMNS","DETAILS_COLUMNS","DashboardContainerComponent","constructor","activatedRoute","changeDetectorRef","flightsService","ngOnInit","workers$","snapshot","data","workers","flights$","flights","ngAfterViewInit","_start","next","pullFlights$","ngOnDestroy","sub$","unsubscribe","selectedFlightEmitterHandler","flight","flightDetails","selectedWorkerEventHandler","worker","console","log","Date","getMinutes","getSeconds","_stop","getFlightByWorkerId","id","pipe","subscribe","detectChanges","duration","workersCmp","selectedWorker","delay","r","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["/Users/MaxLevtov/Projects/flights/public/src/app/dashboard/dashboard-container.component.ts","/Users/MaxLevtov/Projects/flights/public/src/app/dashboard/dashboard-container.component.html"],"sourcesContent":["import {\n  AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component,\n  OnDestroy, OnInit, ViewChild\n} from '@angular/core';\nimport { ActivatedRoute, } from '@angular/router';\nimport {\n  Observable, Subject, interval,\n  mergeMap,\n  of, repeat, switchMap, take, takeUntil, tap\n} from 'rxjs';\nimport { FlightsService } from './providers/flights.service';\nimport { IWorker } from './components/models/worker.model';\nimport { WorkersComponent } from './components/workers/workers.component';\nimport { IFlight, IFlightCol, FLIGHT_COLUMNS, DETAILS_COLUMNS } from './components/models/flights.model';\n\n@Component({\n  selector: 'app-flights',\n  templateUrl: './dashboard-container.component.html',\n  styleUrls: ['./dashboard-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardContainerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  workers$: Observable<IWorker[]>;\n\n  flights$: Observable<IFlight[]>;\n\n  flightDetails: IFlight;\n\n  flightColumns: IFlightCol[] = FLIGHT_COLUMNS;\n\n  detailsColumns: IFlightCol[] = DETAILS_COLUMNS;\n\n  @ViewChild(WorkersComponent, { static: true }) workersCmp: WorkersComponent;\n\n  _stop = new Subject<void>();\n\n  _start = new Subject<void>();\n\n  sub$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private activatedRoute: ActivatedRoute,\n    private changeDetectorRef: ChangeDetectorRef, private flightsService: FlightsService) {\n\n  }\n\n  ngOnInit(): void {\n    this.workers$ = of(this.activatedRoute.snapshot.data['dashboardResolver'].workers);\n    this.flights$ = of(this.activatedRoute.snapshot.data['dashboardResolver'].flights);\n  }\n\n  ngAfterViewInit(): void {\n    this._start.next();\n    this.pullFlights$();\n  }\n\n  ngOnDestroy(): void {\n    this.sub$.next(true);\n    this.sub$.unsubscribe();\n  }\n\n  selectedFlightEmitterHandler(flight: IFlight) {\n    this.flightDetails = { ...flight };\n  }\n\n  selectedWorkerEventHandler(worker: IWorker) {\n    console.log('selectedWorkerEventHandler ', new Date().getMinutes() + ':', new Date().getSeconds());\n    this._stop.next();\n\n    this.flightsService.getFlightByWorkerId(worker.id).pipe(take(1)).pipe(takeUntil(this.sub$)).subscribe((flights: IFlight[]) => {\n\n      this.flights$ = of(flights);\n\n      this._start.next();\n\n      this.pullFlights$();\n      /** \n       * @description improve UX: display flights before next CD cycle\n       */\n      this.changeDetectorRef.detectChanges();\n\n    });\n\n  }\n\n  pullFlights$() {\n\n    // const duration = (1 * 60 * 1000);\n    const duration = (1000);\n\n    interval(duration)\n      .pipe(\n        mergeMap(() => of(this.selectedWorkerEventHandler(this.workersCmp.selectedWorker))),\n        takeUntil(this._stop),\n        repeat({ delay: () => this._start })\n      )\n      .pipe(takeUntil(this.sub$))\n      // .pipe(tap(() => console.log('pullFlights ', new Date().getMinutes() + ':', new Date().getSeconds())))\n      .subscribe(r => console.log('r: ', r));\n\n  }\n\n}\n\n\n","<section class=\"container\">\n\n    <app-workers-list [workers$]=\"workers$\"\n        (selectedWorkerEventEmitter)=\"selectedWorkerEventHandler($event)\"></app-workers-list>\n\n    <app-flights-list [flights$]=\"flights$\"\n        [columns]=\"flightColumns\"\n        (selectedFlightEmitter)=\"selectedFlightEmitterHandler($event)\"></app-flights-list>\n\n    <app-details [flightDetails]=\"flightDetails\"\n    [columns]=\"detailsColumns\"></app-details>\n\n</section>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}