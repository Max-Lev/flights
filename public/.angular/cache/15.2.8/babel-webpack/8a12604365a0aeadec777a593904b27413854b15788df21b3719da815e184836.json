{"ast":null,"code":"import { catchError, from, map, mergeMap, of, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./flights.service\";\nexport class WorkersService {\n  constructor(httpClient, flightsService) {\n    this.httpClient = httpClient;\n    this.flightsService = flightsService;\n    from([1, 2, 3, 4, 5, 6]).pipe(map(n => {\n      if (n === 3) {\n        throwError('E number');\n      }\n      return n;\n    }), catchError(err => of('err'))).subscribe({\n      next: v => console.log(v),\n      error: e => console.log(e)\n    });\n    // .pipe(\n    //   catchError((err) => {\n    //     console.log(err);\n    //     // return throwError(() => new Error(err));\n    //     // return throwError(() => from([]));\n    //     return of();\n    //   })\n    // )\n  }\n\n  getAllWorkers() {\n    return this.httpClient.get(environment.workers);\n  }\n  getWorkerFlights() {\n    const workers$ = this.getAllWorkers();\n    return workers$.pipe(mergeMap(workers => {\n      const {\n        id\n      } = workers[0];\n      return this.flightsService.getFlightByWorkerId(id).pipe(map(flights => ({\n        workers,\n        flights\n      })));\n    }));\n  }\n}\nWorkersService.ɵfac = function WorkersService_Factory(t) {\n  return new (t || WorkersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FlightsService));\n};\nWorkersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkersService,\n  factory: WorkersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,IAAI,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,EAAE,EAAEC,UAAU,QAAQ,MAAM;AAClF,SAASC,WAAW,QAAQ,0CAA0C;;;;AAOtE,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,UAAsB,EAAUC,cAA8B;IAA9D,eAAU,GAAVD,UAAU;IAAsB,mBAAc,GAAdC,cAAc;IAEhET,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CACrBU,IAAI,CAACT,GAAG,CAACU,CAAC,IAAG;MACZ,IAAIA,CAAC,KAAK,CAAC,EAAE;QACXP,UAAU,CAAC,UAAU,CAAC;;MAExB,OAAOO,CAAC;IAEV,CAAC,CAAC,EACAZ,UAAU,CAACa,GAAG,IAAIT,EAAE,CAAC,KAAK,CAAC,CAAC,CAC7B,CACAU,SAAS,CAAC;MACTC,IAAI,EAAGC,CAAC,IAAKC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;MAC3BG,KAAK,EAAGC,CAAC,IAAKH,OAAO,CAACC,GAAG,CAACE,CAAC;KAC5B,CAAC;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAGF;;EAEAC,aAAa;IACX,OAAO,IAAI,CAACZ,UAAU,CAACa,GAAG,CAAQhB,WAAW,CAACiB,OAAO,CAAC;EACxD;EAEAC,gBAAgB;IAEd,MAAMC,QAAQ,GAAG,IAAI,CAACJ,aAAa,EAAE;IAErC,OAAOI,QAAQ,CACZd,IAAI,CACHR,QAAQ,CAAEoB,OAAkB,IAAI;MAC9B,MAAM;QAAEG;MAAE,CAAE,GAAGH,OAAO,CAAC,CAAC,CAAC;MACzB,OAAO,IAAI,CAACb,cAAc,CAACiB,mBAAmB,CAACD,EAAE,CAAC,CAC/Cf,IAAI,CAACT,GAAG,CAAE0B,OAAkB,KAAM;QAAEL,OAAO;QAAEK;MAAO,CAAE,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CACH;EACL;;AA9CWrB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;EAAAuB,YAFb;AAAM","names":["catchError","from","map","mergeMap","of","throwError","environment","WorkersService","constructor","httpClient","flightsService","pipe","n","err","subscribe","next","v","console","log","error","e","getAllWorkers","get","workers","getWorkerFlights","workers$","id","getFlightByWorkerId","flights","factory","providedIn"],"sourceRoot":"","sources":["/Users/MaxLevtov/Projects/flights/public/src/app/dashboard/providers/workers.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, from, map, mergeMap, of, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport { FlightsService } from './flights.service';\nimport { IWorker } from '../components/models/worker.model';\nimport { IFlight } from '../components/models/flights.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkersService {\n\n  constructor(private httpClient: HttpClient, private flightsService: FlightsService) {\n\n    from([1, 2, 3, 4, 5, 6])\n      .pipe(map(n => {\n        if (n === 3) {\n          throwError('E number')\n        }\n        return n;\n\n      }),\n        catchError(err => of('err'))\n      )\n      .subscribe({\n        next: (v) => console.log(v),\n        error: (e) => console.log(e)\n      })\n    // .pipe(\n    //   catchError((err) => {\n    //     console.log(err);\n    //     // return throwError(() => new Error(err));\n    //     // return throwError(() => from([]));\n    //     return of();\n    //   })\n    // )\n\n\n  }\n\n  getAllWorkers(): Observable<IWorker[]> {\n    return this.httpClient.get<any[]>(environment.workers);\n  }\n\n  getWorkerFlights(): Observable<{ workers: IWorker[], flights: IFlight[] }> {\n\n    const workers$ = this.getAllWorkers();\n\n    return workers$\n      .pipe(\n        mergeMap((workers: IWorker[]) => {\n          const { id } = workers[0];\n          return this.flightsService.getFlightByWorkerId(id)\n            .pipe(map((flights: IFlight[]) => ({ workers, flights })))\n        })\n      );\n  }\n\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}